package com.pkg;

public class MergeKsortedLists {
	public static Node head[]=new Node[3];
	public void add(Node headNode , int data ) {
		Node newNode = new Node(data);
		 if(headNode == null)
		    {
		        // Update the head of the linked list
		        headNode = newNode;
		        // Update the head array if necessary
		        for (int i = 0; i < head.length; i++) {
		            if (head[i] == null) {
		                head[i] = newNode;
		                break;
		            }
		        }
		        return ;
		    }
		Node tempNode= headNode;
		while(tempNode.next!=null)
		{
			tempNode=tempNode.next;
		}
		tempNode.next=newNode;
		
	}
	public void print( Node headnNode) {
		Node tempNode=headnNode;
		if(tempNode==null) {
			System.out.println("list is empty ");
			return ;
		}
		while(tempNode!=null)
		{
			System.out.print(tempNode.data +" ");
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		 MergeKsortedLists objKsortedLists= new MergeKsortedLists();
		    head[0] = new Node(0);
		    head[1] = new Node(0);
		    head[2] = new Node(0);
		 objKsortedLists.add(head[0], 0);
		 objKsortedLists.add(head[0], 10);
		 objKsortedLists.add(head[0], 320);
		 objKsortedLists.add(head[1], 20);
		 objKsortedLists.add(head[1], 200);
		 objKsortedLists.add(head[1], 2000);
		 objKsortedLists.add(head[2], 120);
		 objKsortedLists.add(head[2], 130);
		 objKsortedLists.add(head[2], 140);
		 objKsortedLists.add(head[2], 150);
		 
		 objKsortedLists.print(head[0]);
		 objKsortedLists.print(head[1]);
		 objKsortedLists.print(head[2]);
		 
	}
	
	

}
